workflow:
  rules:
    # коммит в master
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  HARBOR_LIBRARY: ${HARBOR_HOST}/library
  HARBOR_IMAGE: ${HARBOR_HOST}/common-apps/${CI_PROJECT_NAME}

stages:
  - test
  - lint
  - build
  - deploy

test:
  image: golang:1.24
  stage: test
  script:
    - go test -v -coverpkg=./internal/...,./pkg/... ./...

lint:
  image: golangci/golangci-lint:v1.64
  stage: lint
  script:
    - golangci-lint run -v

build_image:
  image: docker:20.10.16
  stage: build
  before_script:
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PASSWORD $HARBOR_HOST
  script:
    - docker build . -t ${HARBOR_IMAGE}/app:${CI_COMMIT_SHA}
    - docker push ${HARBOR_IMAGE}/app:${CI_COMMIT_SHA}
  after_script:
    - docker logout $HARBOR_HOST

.deploy_docker_compose:
  image: kroniak/ssh-client
  variables:
    ENVIRONMENT: ENVIRONMENT_PLACEHOLDER
    SSH_WORKDIR: /srv/${CI_PROJECT_NAME}
    SSH_DEPLOY_HOST: ${DEPLOY_HOST}
    SSH_DEPLOY_USER: ${DEPLOY_USER}
    SSH_DEPOLOY_PRIVATE_KEY: ${DEPLOY_PRIVATE_KEY}
    GIT_STRATEGY: none
  dependencies:
    - build_image
  needs:
    - build_image
  script:
    - echo --------------SSH--------------
    - eval $(ssh-agent -s)
    - echo "$SSH_DEPOLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan "$SSH_DEPLOY_HOST" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo --------------Deploy--------------
    - ssh "$SSH_DEPLOY_USER"@"$SSH_DEPLOY_HOST" "docker pull ${HARBOR_IMAGE}/app:${CI_COMMIT_SHA}"
    - ssh "$SSH_DEPLOY_USER"@"$SSH_DEPLOY_HOST" "docker rm -f ${CI_PROJECT_NAME} &>/dev/null && echo 'Removed old container'"
    - ssh "$SSH_DEPLOY_USER"@"$SSH_DEPLOY_HOST" "docker run --rm --detach --name ${CI_PROJECT_NAME}
        -e APP_TELEGRAM_TOKEN=\"${BOT_TOKEN}\"
        ${HARBOR_IMAGE}/app:${CI_COMMIT_SHA}"

deploy_production:
  stage: deploy
  tags:
    - infra-network
    - deploy
  extends: .deploy_docker_compose
  when: manual
  variables:
    ENVIRONMENT: production
    SSH_WORKDIR: /srv/${CI_PROJECT_NAME}
    SSH_DEPLOY_HOST: ${DEPLOY_HOST_PRODUCTION}
    SSH_DEPLOY_USER: ${INFRA_DEPLOY_SSH_USER}
    SSH_DEPOLOY_PRIVATE_KEY: ${INFRA_DEPLOY_SSH_KEY}
  environment:
    name: production
  rules:
    - when: manual
      allow_failure: true
