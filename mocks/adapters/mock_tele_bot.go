// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/adapters (interfaces: TeleBot)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/adapters/mock_tele_bot.go -package=adapters_mocks github.com/fromsi/tg_reaction/internal/adapters TeleBot
//

// Package adapters_mocks is a generated GoMock package.
package adapters_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	telebot "gopkg.in/telebot.v3"
)

// MockTeleBot is a mock of TeleBot interface.
type MockTeleBot struct {
	ctrl     *gomock.Controller
	recorder *MockTeleBotMockRecorder
	isgomock struct{}
}

// MockTeleBotMockRecorder is the mock recorder for MockTeleBot.
type MockTeleBotMockRecorder struct {
	mock *MockTeleBot
}

// NewMockTeleBot creates a new mock instance.
func NewMockTeleBot(ctrl *gomock.Controller) *MockTeleBot {
	mock := &MockTeleBot{ctrl: ctrl}
	mock.recorder = &MockTeleBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeleBot) EXPECT() *MockTeleBotMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m_2 *MockTeleBot) Handle(endpoint any, h telebot.HandlerFunc, m ...telebot.MiddlewareFunc) {
	m_2.ctrl.T.Helper()
	varargs := []any{endpoint, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	m_2.ctrl.Call(m_2, "Handle", varargs...)
}

// Handle indicates an expected call of Handle.
func (mr *MockTeleBotMockRecorder) Handle(endpoint, h any, m ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{endpoint, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockTeleBot)(nil).Handle), varargs...)
}

// Raw mocks base method.
func (m *MockTeleBot) Raw(method string, payload any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw", method, payload)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Raw indicates an expected call of Raw.
func (mr *MockTeleBotMockRecorder) Raw(method, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockTeleBot)(nil).Raw), method, payload)
}

// Start mocks base method.
func (m *MockTeleBot) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockTeleBotMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTeleBot)(nil).Start))
}

// Stop mocks base method.
func (m *MockTeleBot) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTeleBotMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTeleBot)(nil).Stop))
}
