// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/services (interfaces: DiceService)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/mock_dice_service.go -package=services_mocks github.com/fromsi/tg_reaction/internal/services DiceService
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDiceService is a mock of DiceService interface.
type MockDiceService struct {
	ctrl     *gomock.Controller
	recorder *MockDiceServiceMockRecorder
	isgomock struct{}
}

// MockDiceServiceMockRecorder is the mock recorder for MockDiceService.
type MockDiceServiceMockRecorder struct {
	mock *MockDiceService
}

// NewMockDiceService creates a new mock instance.
func NewMockDiceService(ctrl *gomock.Controller) *MockDiceService {
	mock := &MockDiceService{ctrl: ctrl}
	mock.recorder = &MockDiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiceService) EXPECT() *MockDiceServiceMockRecorder {
	return m.recorder
}

// IsWinningValue mocks base method.
func (m *MockDiceService) IsWinningValue(value int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWinningValue", value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWinningValue indicates an expected call of IsWinningValue.
func (mr *MockDiceServiceMockRecorder) IsWinningValue(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWinningValue", reflect.TypeOf((*MockDiceService)(nil).IsWinningValue), value)
}
