// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/services (interfaces: MutableTelebotMethodService)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/mock_mutable_telebot_method.go -package=services_mocks github.com/fromsi/tg_reaction/internal/services MutableTelebotMethodService
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	reflect "reflect"

	json "github.com/fromsi/tg_reaction/pkg/json"
	gomock "go.uber.org/mock/gomock"
)

// MockMutableTelebotMethodService is a mock of MutableTelebotMethodService interface.
type MockMutableTelebotMethodService struct {
	ctrl     *gomock.Controller
	recorder *MockMutableTelebotMethodServiceMockRecorder
	isgomock struct{}
}

// MockMutableTelebotMethodServiceMockRecorder is the mock recorder for MockMutableTelebotMethodService.
type MockMutableTelebotMethodServiceMockRecorder struct {
	mock *MockMutableTelebotMethodService
}

// NewMockMutableTelebotMethodService creates a new mock instance.
func NewMockMutableTelebotMethodService(ctrl *gomock.Controller) *MockMutableTelebotMethodService {
	mock := &MockMutableTelebotMethodService{ctrl: ctrl}
	mock.recorder = &MockMutableTelebotMethodServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableTelebotMethodService) EXPECT() *MockMutableTelebotMethodServiceMockRecorder {
	return m.recorder
}

// SetMessageReaction mocks base method.
func (m *MockMutableTelebotMethodService) SetMessageReaction(chatId int64, messageId int, reaction json.Reaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessageReaction", chatId, messageId, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMessageReaction indicates an expected call of SetMessageReaction.
func (mr *MockMutableTelebotMethodServiceMockRecorder) SetMessageReaction(chatId, messageId, reaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageReaction", reflect.TypeOf((*MockMutableTelebotMethodService)(nil).SetMessageReaction), chatId, messageId, reaction)
}
