// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/telebot/routes (interfaces: Route)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/telebot/routes/mock_route.go -package=routes_mocks github.com/fromsi/tg_reaction/internal/telebot/routes Route
//

// Package routes_mocks is a generated GoMock package.
package routes_mocks

import (
	reflect "reflect"

	types "github.com/fromsi/tg_reaction/internal/telebot/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRoute is a mock of Route interface.
type MockRoute struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMockRecorder
	isgomock struct{}
}

// MockRouteMockRecorder is the mock recorder for MockRoute.
type MockRouteMockRecorder struct {
	mock *MockRoute
}

// NewMockRoute creates a new mock instance.
func NewMockRoute(ctrl *gomock.Controller) *MockRoute {
	mock := &MockRoute{ctrl: ctrl}
	mock.recorder = &MockRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute) EXPECT() *MockRouteMockRecorder {
	return m.recorder
}

// Endpoint mocks base method.
func (m *MockRoute) Endpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint.
func (mr *MockRouteMockRecorder) Endpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockRoute)(nil).Endpoint))
}

// Handle mocks base method.
func (m *MockRoute) Handle(arg0 types.RouteContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockRouteMockRecorder) Handle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRoute)(nil).Handle), arg0)
}
