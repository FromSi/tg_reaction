// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/telebot/types (interfaces: RouteContext)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/telebot/types/mock_route_context.go -package=types_mocks github.com/fromsi/tg_reaction/internal/telebot/types RouteContext
//

// Package types_mocks is a generated GoMock package.
package types_mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	telebot "gopkg.in/telebot.v3"
)

// MockRouteContext is a mock of RouteContext interface.
type MockRouteContext struct {
	ctrl     *gomock.Controller
	recorder *MockRouteContextMockRecorder
	isgomock struct{}
}

// MockRouteContextMockRecorder is the mock recorder for MockRouteContext.
type MockRouteContextMockRecorder struct {
	mock *MockRouteContext
}

// NewMockRouteContext creates a new mock instance.
func NewMockRouteContext(ctrl *gomock.Controller) *MockRouteContext {
	mock := &MockRouteContext{ctrl: ctrl}
	mock.recorder = &MockRouteContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteContext) EXPECT() *MockRouteContextMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockRouteContext) Accept(errorMessage ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range errorMessage {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accept", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockRouteContextMockRecorder) Accept(errorMessage ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockRouteContext)(nil).Accept), errorMessage...)
}

// Answer mocks base method.
func (m *MockRouteContext) Answer(resp *telebot.QueryResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Answer", resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Answer indicates an expected call of Answer.
func (mr *MockRouteContextMockRecorder) Answer(resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Answer", reflect.TypeOf((*MockRouteContext)(nil).Answer), resp)
}

// Args mocks base method.
func (m *MockRouteContext) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockRouteContextMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockRouteContext)(nil).Args))
}

// Boost mocks base method.
func (m *MockRouteContext) Boost() *telebot.BoostUpdated {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Boost")
	ret0, _ := ret[0].(*telebot.BoostUpdated)
	return ret0
}

// Boost indicates an expected call of Boost.
func (mr *MockRouteContextMockRecorder) Boost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boost", reflect.TypeOf((*MockRouteContext)(nil).Boost))
}

// BoostRemoved mocks base method.
func (m *MockRouteContext) BoostRemoved() *telebot.BoostRemoved {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BoostRemoved")
	ret0, _ := ret[0].(*telebot.BoostRemoved)
	return ret0
}

// BoostRemoved indicates an expected call of BoostRemoved.
func (mr *MockRouteContextMockRecorder) BoostRemoved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoostRemoved", reflect.TypeOf((*MockRouteContext)(nil).BoostRemoved))
}

// Bot mocks base method.
func (m *MockRouteContext) Bot() *telebot.Bot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bot")
	ret0, _ := ret[0].(*telebot.Bot)
	return ret0
}

// Bot indicates an expected call of Bot.
func (mr *MockRouteContextMockRecorder) Bot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bot", reflect.TypeOf((*MockRouteContext)(nil).Bot))
}

// Callback mocks base method.
func (m *MockRouteContext) Callback() *telebot.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback")
	ret0, _ := ret[0].(*telebot.Callback)
	return ret0
}

// Callback indicates an expected call of Callback.
func (mr *MockRouteContextMockRecorder) Callback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockRouteContext)(nil).Callback))
}

// Chat mocks base method.
func (m *MockRouteContext) Chat() *telebot.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat")
	ret0, _ := ret[0].(*telebot.Chat)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MockRouteContextMockRecorder) Chat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockRouteContext)(nil).Chat))
}

// ChatJoinRequest mocks base method.
func (m *MockRouteContext) ChatJoinRequest() *telebot.ChatJoinRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatJoinRequest")
	ret0, _ := ret[0].(*telebot.ChatJoinRequest)
	return ret0
}

// ChatJoinRequest indicates an expected call of ChatJoinRequest.
func (mr *MockRouteContextMockRecorder) ChatJoinRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatJoinRequest", reflect.TypeOf((*MockRouteContext)(nil).ChatJoinRequest))
}

// ChatMember mocks base method.
func (m *MockRouteContext) ChatMember() *telebot.ChatMemberUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMember")
	ret0, _ := ret[0].(*telebot.ChatMemberUpdate)
	return ret0
}

// ChatMember indicates an expected call of ChatMember.
func (mr *MockRouteContextMockRecorder) ChatMember() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMember", reflect.TypeOf((*MockRouteContext)(nil).ChatMember))
}

// Data mocks base method.
func (m *MockRouteContext) Data() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(string)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockRouteContextMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockRouteContext)(nil).Data))
}

// Delete mocks base method.
func (m *MockRouteContext) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteContextMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteContext)(nil).Delete))
}

// DeleteAfter mocks base method.
func (m *MockRouteContext) DeleteAfter(d time.Duration) *time.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAfter", d)
	ret0, _ := ret[0].(*time.Timer)
	return ret0
}

// DeleteAfter indicates an expected call of DeleteAfter.
func (mr *MockRouteContextMockRecorder) DeleteAfter(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAfter", reflect.TypeOf((*MockRouteContext)(nil).DeleteAfter), d)
}

// Edit mocks base method.
func (m *MockRouteContext) Edit(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Edit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockRouteContextMockRecorder) Edit(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockRouteContext)(nil).Edit), varargs...)
}

// EditCaption mocks base method.
func (m *MockRouteContext) EditCaption(caption string, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{caption}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditCaption", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCaption indicates an expected call of EditCaption.
func (mr *MockRouteContextMockRecorder) EditCaption(caption any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{caption}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCaption", reflect.TypeOf((*MockRouteContext)(nil).EditCaption), varargs...)
}

// EditOrReply mocks base method.
func (m *MockRouteContext) EditOrReply(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditOrReply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrReply indicates an expected call of EditOrReply.
func (mr *MockRouteContextMockRecorder) EditOrReply(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrReply", reflect.TypeOf((*MockRouteContext)(nil).EditOrReply), varargs...)
}

// EditOrSend mocks base method.
func (m *MockRouteContext) EditOrSend(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditOrSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrSend indicates an expected call of EditOrSend.
func (mr *MockRouteContextMockRecorder) EditOrSend(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrSend", reflect.TypeOf((*MockRouteContext)(nil).EditOrSend), varargs...)
}

// Entities mocks base method.
func (m *MockRouteContext) Entities() telebot.Entities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entities")
	ret0, _ := ret[0].(telebot.Entities)
	return ret0
}

// Entities indicates an expected call of Entities.
func (mr *MockRouteContextMockRecorder) Entities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entities", reflect.TypeOf((*MockRouteContext)(nil).Entities))
}

// Forward mocks base method.
func (m *MockRouteContext) Forward(msg telebot.Editable, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Forward", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Forward indicates an expected call of Forward.
func (mr *MockRouteContextMockRecorder) Forward(msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockRouteContext)(nil).Forward), varargs...)
}

// ForwardTo mocks base method.
func (m *MockRouteContext) ForwardTo(to telebot.Recipient, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{to}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForwardTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardTo indicates an expected call of ForwardTo.
func (mr *MockRouteContextMockRecorder) ForwardTo(to any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{to}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardTo", reflect.TypeOf((*MockRouteContext)(nil).ForwardTo), varargs...)
}

// Get mocks base method.
func (m *MockRouteContext) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRouteContextMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteContext)(nil).Get), key)
}

// InlineResult mocks base method.
func (m *MockRouteContext) InlineResult() *telebot.InlineResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InlineResult")
	ret0, _ := ret[0].(*telebot.InlineResult)
	return ret0
}

// InlineResult indicates an expected call of InlineResult.
func (mr *MockRouteContextMockRecorder) InlineResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InlineResult", reflect.TypeOf((*MockRouteContext)(nil).InlineResult))
}

// Message mocks base method.
func (m *MockRouteContext) Message() *telebot.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(*telebot.Message)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockRouteContextMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockRouteContext)(nil).Message))
}

// Migration mocks base method.
func (m *MockRouteContext) Migration() (int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// Migration indicates an expected call of Migration.
func (mr *MockRouteContextMockRecorder) Migration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MockRouteContext)(nil).Migration))
}

// Notify mocks base method.
func (m *MockRouteContext) Notify(action telebot.ChatAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockRouteContextMockRecorder) Notify(action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockRouteContext)(nil).Notify), action)
}

// Poll mocks base method.
func (m *MockRouteContext) Poll() *telebot.Poll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll")
	ret0, _ := ret[0].(*telebot.Poll)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockRouteContextMockRecorder) Poll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockRouteContext)(nil).Poll))
}

// PollAnswer mocks base method.
func (m *MockRouteContext) PollAnswer() *telebot.PollAnswer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollAnswer")
	ret0, _ := ret[0].(*telebot.PollAnswer)
	return ret0
}

// PollAnswer indicates an expected call of PollAnswer.
func (mr *MockRouteContextMockRecorder) PollAnswer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollAnswer", reflect.TypeOf((*MockRouteContext)(nil).PollAnswer))
}

// PreCheckoutQuery mocks base method.
func (m *MockRouteContext) PreCheckoutQuery() *telebot.PreCheckoutQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCheckoutQuery")
	ret0, _ := ret[0].(*telebot.PreCheckoutQuery)
	return ret0
}

// PreCheckoutQuery indicates an expected call of PreCheckoutQuery.
func (mr *MockRouteContextMockRecorder) PreCheckoutQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCheckoutQuery", reflect.TypeOf((*MockRouteContext)(nil).PreCheckoutQuery))
}

// Query mocks base method.
func (m *MockRouteContext) Query() *telebot.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(*telebot.Query)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockRouteContextMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRouteContext)(nil).Query))
}

// Recipient mocks base method.
func (m *MockRouteContext) Recipient() telebot.Recipient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recipient")
	ret0, _ := ret[0].(telebot.Recipient)
	return ret0
}

// Recipient indicates an expected call of Recipient.
func (mr *MockRouteContextMockRecorder) Recipient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recipient", reflect.TypeOf((*MockRouteContext)(nil).Recipient))
}

// Reply mocks base method.
func (m *MockRouteContext) Reply(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockRouteContextMockRecorder) Reply(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockRouteContext)(nil).Reply), varargs...)
}

// Respond mocks base method.
func (m *MockRouteContext) Respond(resp ...*telebot.CallbackResponse) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range resp {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Respond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MockRouteContextMockRecorder) Respond(resp ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockRouteContext)(nil).Respond), resp...)
}

// RespondAlert mocks base method.
func (m *MockRouteContext) RespondAlert(text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondAlert", text)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondAlert indicates an expected call of RespondAlert.
func (mr *MockRouteContextMockRecorder) RespondAlert(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondAlert", reflect.TypeOf((*MockRouteContext)(nil).RespondAlert), text)
}

// RespondText mocks base method.
func (m *MockRouteContext) RespondText(text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondText", text)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondText indicates an expected call of RespondText.
func (mr *MockRouteContextMockRecorder) RespondText(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondText", reflect.TypeOf((*MockRouteContext)(nil).RespondText), text)
}

// Send mocks base method.
func (m *MockRouteContext) Send(what any, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRouteContextMockRecorder) Send(what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouteContext)(nil).Send), varargs...)
}

// SendAlbum mocks base method.
func (m *MockRouteContext) SendAlbum(a telebot.Album, opts ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{a}
	for _, a_2 := range opts {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "SendAlbum", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAlbum indicates an expected call of SendAlbum.
func (mr *MockRouteContextMockRecorder) SendAlbum(a any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{a}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlbum", reflect.TypeOf((*MockRouteContext)(nil).SendAlbum), varargs...)
}

// Sender mocks base method.
func (m *MockRouteContext) Sender() *telebot.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(*telebot.User)
	return ret0
}

// Sender indicates an expected call of Sender.
func (mr *MockRouteContextMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockRouteContext)(nil).Sender))
}

// Set mocks base method.
func (m *MockRouteContext) Set(key string, val any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, val)
}

// Set indicates an expected call of Set.
func (mr *MockRouteContextMockRecorder) Set(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRouteContext)(nil).Set), key, val)
}

// Ship mocks base method.
func (m *MockRouteContext) Ship(what ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range what {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ship", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ship indicates an expected call of Ship.
func (mr *MockRouteContextMockRecorder) Ship(what ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ship", reflect.TypeOf((*MockRouteContext)(nil).Ship), what...)
}

// ShippingQuery mocks base method.
func (m *MockRouteContext) ShippingQuery() *telebot.ShippingQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShippingQuery")
	ret0, _ := ret[0].(*telebot.ShippingQuery)
	return ret0
}

// ShippingQuery indicates an expected call of ShippingQuery.
func (mr *MockRouteContextMockRecorder) ShippingQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShippingQuery", reflect.TypeOf((*MockRouteContext)(nil).ShippingQuery))
}

// Text mocks base method.
func (m *MockRouteContext) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockRouteContextMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockRouteContext)(nil).Text))
}

// Topic mocks base method.
func (m *MockRouteContext) Topic() *telebot.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(*telebot.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockRouteContextMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockRouteContext)(nil).Topic))
}

// Update mocks base method.
func (m *MockRouteContext) Update() telebot.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(telebot.Update)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRouteContextMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteContext)(nil).Update))
}
