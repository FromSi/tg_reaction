// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/use_case (interfaces: ClearReactionUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/use_case/mock_clear_reaction_use_case.go -package=use_case_mocks github.com/fromsi/tg_reaction/internal/use_case ClearReactionUseCase
//

// Package use_case_mocks is a generated GoMock package.
package use_case_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClearReactionUseCase is a mock of ClearReactionUseCase interface.
type MockClearReactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockClearReactionUseCaseMockRecorder
	isgomock struct{}
}

// MockClearReactionUseCaseMockRecorder is the mock recorder for MockClearReactionUseCase.
type MockClearReactionUseCaseMockRecorder struct {
	mock *MockClearReactionUseCase
}

// NewMockClearReactionUseCase creates a new mock instance.
func NewMockClearReactionUseCase(ctrl *gomock.Controller) *MockClearReactionUseCase {
	mock := &MockClearReactionUseCase{ctrl: ctrl}
	mock.recorder = &MockClearReactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClearReactionUseCase) EXPECT() *MockClearReactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockClearReactionUseCase) Execute(chatId int64, messageId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", chatId, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockClearReactionUseCaseMockRecorder) Execute(chatId, messageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockClearReactionUseCase)(nil).Execute), chatId, messageId)
}
