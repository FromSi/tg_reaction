// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/use_case (interfaces: DiceReactionUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/use_case/mock_dice_reaction_use_case.go -package=use_case_mocks github.com/fromsi/tg_reaction/internal/use_case DiceReactionUseCase
//

// Package use_case_mocks is a generated GoMock package.
package use_case_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDiceReactionUseCase is a mock of DiceReactionUseCase interface.
type MockDiceReactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDiceReactionUseCaseMockRecorder
	isgomock struct{}
}

// MockDiceReactionUseCaseMockRecorder is the mock recorder for MockDiceReactionUseCase.
type MockDiceReactionUseCaseMockRecorder struct {
	mock *MockDiceReactionUseCase
}

// NewMockDiceReactionUseCase creates a new mock instance.
func NewMockDiceReactionUseCase(ctrl *gomock.Controller) *MockDiceReactionUseCase {
	mock := &MockDiceReactionUseCase{ctrl: ctrl}
	mock.recorder = &MockDiceReactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiceReactionUseCase) EXPECT() *MockDiceReactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDiceReactionUseCase) Execute(chatId int64, messageId, diceValue int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", chatId, messageId, diceValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDiceReactionUseCaseMockRecorder) Execute(chatId, messageId, diceValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDiceReactionUseCase)(nil).Execute), chatId, messageId, diceValue)
}
