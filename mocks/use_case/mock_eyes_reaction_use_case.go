// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/use_case (interfaces: EyesReactionUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/use_case/mock_eyes_reaction_use_case.go -package=use_case_mocks github.com/fromsi/tg_reaction/internal/use_case EyesReactionUseCase
//

// Package use_case_mocks is a generated GoMock package.
package use_case_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEyesReactionUseCase is a mock of EyesReactionUseCase interface.
type MockEyesReactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEyesReactionUseCaseMockRecorder
	isgomock struct{}
}

// MockEyesReactionUseCaseMockRecorder is the mock recorder for MockEyesReactionUseCase.
type MockEyesReactionUseCaseMockRecorder struct {
	mock *MockEyesReactionUseCase
}

// NewMockEyesReactionUseCase creates a new mock instance.
func NewMockEyesReactionUseCase(ctrl *gomock.Controller) *MockEyesReactionUseCase {
	mock := &MockEyesReactionUseCase{ctrl: ctrl}
	mock.recorder = &MockEyesReactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEyesReactionUseCase) EXPECT() *MockEyesReactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockEyesReactionUseCase) Execute(chatId int64, messageId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", chatId, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockEyesReactionUseCaseMockRecorder) Execute(chatId, messageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockEyesReactionUseCase)(nil).Execute), chatId, messageId)
}
