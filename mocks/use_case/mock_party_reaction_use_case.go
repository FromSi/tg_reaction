// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/use_case (interfaces: PartyReactionUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/use_case/mock_party_reaction_use_case.go -package=use_case_mocks github.com/fromsi/tg_reaction/internal/use_case PartyReactionUseCase
//

// Package use_case_mocks is a generated GoMock package.
package use_case_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPartyReactionUseCase is a mock of PartyReactionUseCase interface.
type MockPartyReactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPartyReactionUseCaseMockRecorder
	isgomock struct{}
}

// MockPartyReactionUseCaseMockRecorder is the mock recorder for MockPartyReactionUseCase.
type MockPartyReactionUseCaseMockRecorder struct {
	mock *MockPartyReactionUseCase
}

// NewMockPartyReactionUseCase creates a new mock instance.
func NewMockPartyReactionUseCase(ctrl *gomock.Controller) *MockPartyReactionUseCase {
	mock := &MockPartyReactionUseCase{ctrl: ctrl}
	mock.recorder = &MockPartyReactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartyReactionUseCase) EXPECT() *MockPartyReactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPartyReactionUseCase) Execute(chatId int64, messageId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", chatId, messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockPartyReactionUseCaseMockRecorder) Execute(chatId, messageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPartyReactionUseCase)(nil).Execute), chatId, messageId)
}
