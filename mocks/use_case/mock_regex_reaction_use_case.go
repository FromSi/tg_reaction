// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fromsi/tg_reaction/internal/use_case (interfaces: RegexReactionUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/use_case/mock_regex_reaction_use_case.go -package=use_case_mocks github.com/fromsi/tg_reaction/internal/use_case RegexReactionUseCase
//

// Package use_case_mocks is a generated GoMock package.
package use_case_mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRegexReactionUseCase is a mock of RegexReactionUseCase interface.
type MockRegexReactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegexReactionUseCaseMockRecorder
	isgomock struct{}
}

// MockRegexReactionUseCaseMockRecorder is the mock recorder for MockRegexReactionUseCase.
type MockRegexReactionUseCaseMockRecorder struct {
	mock *MockRegexReactionUseCase
}

// NewMockRegexReactionUseCase creates a new mock instance.
func NewMockRegexReactionUseCase(ctrl *gomock.Controller) *MockRegexReactionUseCase {
	mock := &MockRegexReactionUseCase{ctrl: ctrl}
	mock.recorder = &MockRegexReactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegexReactionUseCase) EXPECT() *MockRegexReactionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRegexReactionUseCase) Execute(chatId int64, messageId int, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", chatId, messageId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRegexReactionUseCaseMockRecorder) Execute(chatId, messageId, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegexReactionUseCase)(nil).Execute), chatId, messageId, text)
}
